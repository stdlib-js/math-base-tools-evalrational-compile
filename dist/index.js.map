{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar COEFFICIENT_RATIO_TEMPLATE = readFile( join( dir, 'coefficient_ratio.js.txt' ), opts ); // eslint-disable-line id-length\nvar EVALRATIONAL_TEMPLATE = readFile( join( dir, 'evalrational.js.txt' ), opts );\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.js.txt' ), opts );\nvar NAN_TEMPLATE = readFile( join( dir, 'nan.js.txt' ), opts );\nvar MAX_CHARS = 66; // max-len (80) - chars already in line ('2x tab': 8, 's1 = ': 5, ';': 1)\n\n\n// FUNCTIONS //\n\n/**\n* Serializes a single value to a string.\n*\n* @private\n* @param {number} x - value to serialize\n* @returns {string} serialized value\n*/\nfunction value2string( x ) {\n\tvar str = x.toString();\n\tif ( isInteger( x ) ) {\n\t\tstr += '.0';\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of numbers to an indented newline separated list.\n*\n* @private\n* @param {NumericArray} x - array of numbers\n* @returns {string} serialized value\n*/\nfunction array2list( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = '';\n\tfor ( i = 0; i < n; i++ ) {\n\t\tstr += '\\t' + x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tif ( i < m ) {\n\t\t\tstr += ',\\n';\n\t\t}\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in ascending degree\n* @returns {string} output string\n*/\nfunction hornerAscending( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = x[ 0 ].toString();\n\tif ( isInteger( x[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tfor ( i = 1; i < n; i++ ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i < m ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in descending degree\n* @returns {string} output string\n*/\nfunction hornerDescending( x ) {\n\tvar str;\n\tvar m;\n\tvar i;\n\n\tm = x.length - 1;\n\tstr = x[ m ].toString();\n\tif ( isInteger( x[ m ] ) ) {\n\t\tstr += '.0';\n\t}\n\tfor ( i = m-1; i >= 0; i-- ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i > 0 ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n/**\n* Replaces the specified tag in a source string by the chosen replacement and adds directive to disable the maximum line length lint rule if necessary.\n*\n* @private\n* @param {string} src - source string\n* @param {string} target - target tag\n* @param {string} str - replacement\n* @returns {string} output string\n*/\nfunction replaceString( src, target, str ) {\n\tvar out = replace( src, '{{'+target+'}}', str );\n\tif ( str.length > MAX_CHARS ) {\n\t\tout = replace( out, '{{'+target+'_ESLINT}}', ' // eslint-disable-line max-len' );\n\t} else {\n\t\tout = replace( out, '{{'+target+'_ESLINT}}', '' );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Compiles a module string which exports a function for evaluating a rational function.\n*\n* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree\n* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree\n* @returns {string} module string exporting a function for evaluating a rational function\n*\n* @example\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q );\n* // returns <string>\n*/\nfunction compile( P, Q ) {\n\tvar str;\n\tvar n;\n\n\tn = P.length;\n\n\t// If no coefficients, the function always returns NaN...\n\tif ( n === 0 ) {\n\t\treturn NAN_TEMPLATE;\n\t}\n\t// If P and Q have different lengths, the function always returns NaN...\n\tif ( n !== Q.length ) {\n\t\treturn NAN_TEMPLATE;\n\t}\n\t// If P and Q only have one coefficient, the function always returns the ratio of those coefficients...\n\tif ( n === 1 ) {\n\t\treturn replace( COEFFICIENT_RATIO_TEMPLATE, '{{ratio}}', value2string( P[0] / Q[0] ) );\n\t}\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = replace( LOOP_TEMPLATE, '{{P}}', array2list( P ) );\n\t\tstr = replace( str, '{{Q}}', array2list( Q ) );\n\t\treturn replace( str, '{{ratio}}', value2string( P[0]/Q[0] ) );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\tstr = replaceString( EVALRATIONAL_TEMPLATE, 'P_ASCENDING', hornerAscending( P ) );\n\tstr = replaceString( str, 'Q_ASCENDING', hornerAscending( Q ) );\n\tstr = replaceString( str, 'P_DESCENDING', hornerDescending( P ) );\n\tstr = replaceString( str, 'Q_DESCENDING', hornerDescending( Q ) );\n\treturn replace( str, '{{ratio}}', value2string( P[0]/Q[0] ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a module for evaluating a rational function.\n*\n* @module @stdlib/math-base-tools-evalrational-compile\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalrational-compile' );\n*\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q ); // ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 )\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "join", "readFile", "replace", "isInteger", "opts", "dir", "COEFFICIENT_RATIO_TEMPLATE", "EVALRATIONAL_TEMPLATE", "LOOP_TEMPLATE", "NAN_TEMPLATE", "MAX_CHARS", "value2string", "x", "str", "array2list", "n", "m", "i", "hornerAscending", "hornerDescending", "replaceString", "src", "target", "out", "compile", "P", "Q", "main"]
}
