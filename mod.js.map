{"version":3,"file":"mod.js","sources":["../189f468fe0d4d2267a3a6508db0fba","../lib/main.js","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/math-base-tools-evalrational-compile/math-base-tools-evalrational-compile/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar COEFFICIENT_RATIO_TEMPLATE = readFile( join( dir, 'coefficient_ratio.js.txt' ), opts ); // eslint-disable-line id-length\nvar EVALRATIONAL_TEMPLATE = readFile( join( dir, 'evalrational.js.txt' ), opts );\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.js.txt' ), opts );\nvar NAN_TEMPLATE = readFile( join( dir, 'nan.js.txt' ), opts );\nvar MAX_CHARS = 66; // max-len (80) - chars already in line ('2x tab': 8, 's1 = ': 5, ';': 1)\n\n\n// FUNCTIONS //\n\n/**\n* Serializes a single value to a string.\n*\n* @private\n* @param {number} x - value to serialize\n* @returns {string} serialized value\n*/\nfunction value2string( x ) {\n\tvar str = x.toString();\n\tif ( isInteger( x ) ) {\n\t\tstr += '.0';\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of numbers to an indented newline separated list.\n*\n* @private\n* @param {NumericArray} x - array of numbers\n* @returns {string} serialized value\n*/\nfunction array2list( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = '';\n\tfor ( i = 0; i < n; i++ ) {\n\t\tstr += '\\t' + x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tif ( i < m ) {\n\t\t\tstr += ',\\n';\n\t\t}\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in ascending degree\n* @returns {string} output string\n*/\nfunction hornerAscending( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = x[ 0 ].toString();\n\tif ( isInteger( x[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tfor ( i = 1; i < n; i++ ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i < m ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in descending degree\n* @returns {string} output string\n*/\nfunction hornerDescending( x ) {\n\tvar str;\n\tvar m;\n\tvar i;\n\n\tm = x.length - 1;\n\tstr = x[ m ].toString();\n\tif ( isInteger( x[ m ] ) ) {\n\t\tstr += '.0';\n\t}\n\tfor ( i = m-1; i >= 0; i-- ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i > 0 ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n/**\n* Replaces the specified tag in a source string by the chosen replacement and adds directive to disable the maximum line length lint rule if necessary.\n*\n* @private\n* @param {string} src - source string\n* @param {string} target - target tag\n* @param {string} str - replacement\n* @returns {string} output string\n*/\nfunction replaceString( src, target, str ) {\n\tvar out = replace( src, '{{'+target+'}}', str );\n\tif ( str.length > MAX_CHARS ) {\n\t\tout = replace( out, '{{'+target+'_ESLINT}}', ' // eslint-disable-line max-len' );\n\t} else {\n\t\tout = replace( out, '{{'+target+'_ESLINT}}', '' );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Compiles a module string which exports a function for evaluating a rational function.\n*\n* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree\n* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree\n* @returns {string} module string exporting a function for evaluating a rational function\n*\n* @example\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q );\n* // returns <string>\n*/\nfunction compile( P, Q ) {\n\tvar str;\n\tvar n;\n\n\tn = P.length;\n\n\t// If no coefficients, the function always returns NaN...\n\tif ( n === 0 ) {\n\t\treturn NAN_TEMPLATE;\n\t}\n\t// If P and Q have different lengths, the function always returns NaN...\n\tif ( n !== Q.length ) {\n\t\treturn NAN_TEMPLATE;\n\t}\n\t// If P and Q only have one coefficient, the function always returns the ratio of those coefficients...\n\tif ( n === 1 ) {\n\t\treturn replace( COEFFICIENT_RATIO_TEMPLATE, '{{ratio}}', value2string( P[0] / Q[0] ) );\n\t}\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = replace( LOOP_TEMPLATE, '{{P}}', array2list( P ) );\n\t\tstr = replace( str, '{{Q}}', array2list( Q ) );\n\t\treturn replace( str, '{{ratio}}', value2string( P[0]/Q[0] ) );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\tstr = replaceString( EVALRATIONAL_TEMPLATE, 'P_ASCENDING', hornerAscending( P ) );\n\tstr = replaceString( str, 'Q_ASCENDING', hornerAscending( Q ) );\n\tstr = replaceString( str, 'P_DESCENDING', hornerDescending( P ) );\n\tstr = replaceString( str, 'Q_DESCENDING', hornerDescending( Q ) );\n\treturn replace( str, '{{ratio}}', value2string( P[0]/Q[0] ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a module for evaluating a rational function.\n*\n* @module @stdlib/math-base-tools-evalrational-compile\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalrational-compile' );\n*\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q ); // ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 )\n* // returns <string>\n*/\n\n// MODULES //\n\nvar compile = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n"],"names":["join","require","readFile","sync","replace","isInteger","isPrimitive","opts","encoding","dir","COEFFICIENT_RATIO_TEMPLATE","EVALRATIONAL_TEMPLATE","LOOP_TEMPLATE","NAN_TEMPLATE","value2string","x","str","toString","array2list","n","m","i","length","hornerAscending","hornerDescending","replaceString","src","target","out","module","exports","P","Q","lib"],"mappings":";;yQAAA,ICsBIA,EAAOC,QAAS,QAASD,KACzBE,EAAWD,QAAS,wBAAyBE,KAC7CC,EAAUH,QAAS,0BACnBI,EAAYJ,QAAS,6BAA8BK,YAKnDC,EAAO,CACVC,SAAY,QAETC,EAAMT,EDjCK,kGCiCY,aAGvBU,EAA6BR,EAAUF,EAAMS,EAAK,4BAA8BF,GAChFI,EAAwBT,EAAUF,EAAMS,EAAK,uBAAyBF,GACtEK,EAAgBV,EAAUF,EAAMS,EAAK,eAAiBF,GACtDM,EAAeX,EAAUF,EAAMS,EAAK,cAAgBF,GAaxD,SAASO,EAAcC,GACtB,IAAIC,EAAMD,EAAEE,WAIZ,OAHKZ,EAAWU,KACfC,GAAO,MAEDA,EAUR,SAASE,EAAYH,GACpB,IAAIC,EACAG,EACAC,EACAC,EAKJ,IAFAD,GADAD,EAAIJ,EAAEO,QACE,EACRN,EAAM,GACAK,EAAI,EAAGA,EAAIF,EAAGE,IACnBL,GAAO,KAAOD,EAAGM,GAAIJ,WAChBZ,EAAWU,EAAGM,MAClBL,GAAO,MAEHK,EAAID,IACRJ,GAAO,OAGT,OAAOA,EAUR,SAASO,EAAiBR,GACzB,IAAIC,EACAG,EACAC,EACAC,EAQJ,IALAD,GADAD,EAAIJ,EAAEO,QACE,EACRN,EAAMD,EAAG,GAAIE,WACRZ,EAAWU,EAAG,MAClBC,GAAO,MAEFK,EAAI,EAAGA,EAAIF,EAAGE,IACnBL,GAAO,WACFK,EAAID,IACRJ,GAAO,KAERA,GAAOD,EAAGM,GAAIJ,WACTZ,EAAWU,EAAGM,MAClBL,GAAO,MAIT,IAAMK,EAAI,EAAGA,EAAK,EAAED,EAAG,EAAGC,IACzBL,GAAO,IAER,OAAOA,EAUR,SAASQ,EAAkBT,GAC1B,IAAIC,EACAI,EACAC,EAOJ,IAJAL,EAAMD,EADNK,EAAIL,EAAEO,OAAS,GACFL,WACRZ,EAAWU,EAAGK,MAClBJ,GAAO,MAEFK,EAAID,EAAE,EAAGC,GAAK,EAAGA,IACtBL,GAAO,WACFK,EAAI,IACRL,GAAO,KAERA,GAAOD,EAAGM,GAAIJ,WACTZ,EAAWU,EAAGM,MAClBL,GAAO,MAIT,IAAMK,EAAI,EAAGA,EAAK,EAAED,EAAG,EAAGC,IACzBL,GAAO,IAER,OAAOA,EAYR,SAASS,EAAeC,EAAKC,EAAQX,GACpC,IAAIY,EAAMxB,EAASsB,EAAK,KAAKC,EAAO,KAAMX,GAM1C,OAJCY,EADIZ,EAAIM,OAjIM,GAkIRlB,EAASwB,EAAK,KAAKD,EAAO,YAAa,mCAEvCvB,EAASwB,EAAK,KAAKD,EAAO,YAAa,IAyD/CE,OAAOC,QAnCP,SAAkBC,EAAGC,GACpB,IAAIhB,EACAG,EAKJ,OAAW,KAHXA,EAAIY,EAAET,SAODH,IAAMa,EAAEV,OAHLT,EAOG,IAANM,EACGf,EAASM,EAA4B,YAAaI,EAAciB,EAAE,GAAKC,EAAE,KAG5Eb,EAAI,KACRH,EAAMZ,EAASQ,EAAe,QAASM,EAAYa,IACnDf,EAAMZ,EAASY,EAAK,QAASE,EAAYc,IAClC5B,EAASY,EAAK,YAAaF,EAAciB,EAAE,GAAGC,EAAE,OAGxDhB,EAAMS,EAAed,EAAuB,cAAeY,EAAiBQ,IAC5Ef,EAAMS,EAAeT,EAAK,cAAeO,EAAiBS,IAC1DhB,EAAMS,EAAeT,EAAK,eAAgBQ,EAAkBO,IAC5Df,EAAMS,EAAeT,EAAK,eAAgBQ,EAAkBQ,IACrD5B,EAASY,EAAK,YAAaF,EAAciB,EAAE,GAAGC,EAAE,WCrLxDC"}